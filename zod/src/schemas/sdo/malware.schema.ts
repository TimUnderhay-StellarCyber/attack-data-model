import { z } from "zod";
import { StixTypeSchema } from "../common/stix-type";
import { StixIdentifierImpl } from "../../classes/stix-identifier.cls";
import { SoftwareSchema } from "./software.schema";

// Custom error messages
const MalwareError = {
    InvalidVersion: {
        code: z.ZodIssueCode.custom,
        message: "Malware version must be a valid semantic version string",
    },
    // Add more custom error messages as needed
};

// Malware Schema
export const MalwareSchema = SoftwareSchema.extend({

    id: createStixIdentifierSchema(StixTypeSchema.enum.malware),

    type: z.literal(StixTypeSchema.enum.malware),

    x_mitre_old_attack_id: z.string()
    .describe("Old ATT&CK ids that may have been associated with this software")
    .optional(),

    is_family: z.boolean()
    .describe("Whether the object represents a malware family (if true) or a malware instance (if false)")
});

// Define the type for Malware
export type Malware = z.infer<typeof MalwareSchema>;