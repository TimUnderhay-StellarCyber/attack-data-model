import { z } from "zod";
import { StixTypeSchema } from "../common/stix-type";
import { SoftwareSchema } from "./software.schema";
import { createStixIdentifierSchema, KillChainPhaseSchema, StixIdentifierSchema, StixTimestampSchema } from "../common";

// Initializes the custom ZodErrorMap
// TODO migrate to loading this in a globally scoped module
import '../../errors'; 
export const malwareTypes = z.enum([
    "adware",
    "backdoor",
    "bot",
    "bootkit",
    "ddos",
    "downloader",
    "dropper",
    "exploit-kit",
    "keylogger",
    "ransomware",
    "remote-access-trojan",
    "resource-exploitation",
    "rogue-security-software",
    "rootkit",
    "screen-capture",
    "spyware",
    "trojan",
    "virus",
    "webshell",
    "wiper",
    "worm",
    "unknown"
]);

export const processorArchitectures = z.enum([
    "alpha",
    "arm",
    "ia-64",
    "mips",
    "powerpc",
    "sparc",
    "x86",
    "x86-64"
])

export const implementationLanguages = z.enum([
    "applescript",
    "bash",
    "c",
    "c++",
    "c#",
    "go",
    "java",
    "javascript",
    "lua",
    "objective-c",
    "perl",
    "php",
    "powershell",
    "python",
    "ruby",
    "scala",
    "swift",
    "typescript",
    "visual-basic",
    "x86-32",
    "x86-64"
])

export const malwareCapabilities = z.enum([
    "accesses-remote-machines",
    "anti-debugging",
    "anti-disassembly",
    "anti-emulation",
    "anti-memory-forensics",
    "anti-sandbox",
    "anti-vm",
    "captures-input-peripherals",
    "captures-output-peripherals",
    "captures-system-state-data",
    "cleans-traces-of-infection",
    "commits-fraud",
    "communicates-with-c2",
    "compromises-data-integrity",
    "compromises-data-availability",
    "compromises-system-availability",
    "controls-local-machine",
    "degrades-security-software",
    "degrades-system-updates",
    "determines-c2-server",
    "emails-spam",
    "escalates-privileges",
    "evades-av",
    "exfiltrates-data",
    "fingerprints-host",
    "hides-artifacts",
    "hides-executing-code",
    "infects-files",
    "infects-remote-machines",
    "installs-other-components",
    "persists-after-system-reboot",
    "prevents-artifact-access",
    "prevents-artifact-deletion",
    "probes-network-environment",
    "self-modifies",
    "steals-authentication-credentials",
    "violates-system-operational-integrity"
])

export const MalwareSchema = SoftwareSchema.extend({

    id: createStixIdentifierSchema(StixTypeSchema.enum.malware),

    type: z.literal(StixTypeSchema.enum.malware),

    is_family: z.boolean()
        .describe("Whether the object represents a malware family (if true) or a malware instance (if false)"),

    // NOTE: Technically this array should reference a well-defined vocabulary (malware-type-ov) but we don't use this field in ATT&CK Malware
    malware_types: z
        .array(malwareTypes)
        .describe('A set of categorizations for the malware being described.')
        .optional(),

    // Not used in ATT&CK Malware but defined in STIX
    aliases: z.array(z.string()).optional().describe("Alternative names used to identify this Campaign."),

    // Not used in ATT&CK Malware but defined in STIX
    kill_chain_phases: z
        .array(KillChainPhaseSchema)
        .describe('The list of Kill Chain Phases for which this malware can be used.')
        .optional(),

    first_seen: StixTimestampSchema
        .optional()
        .describe("The time that this malware instance or malware family was first seen."),

    last_seen: StixTimestampSchema
        .optional()
        .describe("The time that this malware family or malware instance was last seen."),

    // Not used in ATT&CK Malware but defined in STIX
    os_execution_envs : z
        .array(z.string())
        .describe('The operating systems that the malware family or malware instance is executable on. This applies to virtualized operating systems as well as those running on bare metal.')
        .optional(),

    // NOTE: Technically this array should reference a well-defined vocabulary (processor-architecture-ov) but we don't use this field in ATT&CK Malware
    architecture_execution_envs: z
        .array(processorArchitectures)
        .describe('The processor architectures (e.g., x86, ARM, etc.) that the malware instance or family is executable on.')
        .optional(),

    // NOTE: Technically this array should reference a well-defined vocabulary (implementation-language-ov) but we don't use this field in ATT&CK Malware
    implementation_languages: z
        .array(implementationLanguages)
        .describe('The programming language(s) used to implement the malware instance or family.')
        .optional(),

    // NOTE: Technically this array should reference a well-defined vocabulary (malware-capabilities-ov) but we don't use this field in ATT&CK Malware
    capabilities: z
        .array(malwareCapabilities)
        .describe('Any of the capabilities identified for the malware instance or family.')
        .optional(),

    // Not used in ATT&CK Malware but defined in STIX
    sample_refs: z
        .array(StixIdentifierSchema)
        .optional()
        .describe('The sample_refs property specifies a list of identifiers of the SCO file or artifact objects associated with this malware instance(s) or family.')
});

// Define the type for Malware
export type Malware = z.infer<typeof MalwareSchema>;