import { Description, ExternalReferences, Name, ObjectMarkingRefs, StixCreatedByRef, StixCreatedTimestamp, StixIdentifier, StixModifiedTimestamp, StixSpecVersion, StixType, XMitreAttackSpecVersion, XMitreContributors, XMitreCreatedByRef, XMitreDomains, XMitrePlatforms, XMitreVersion, stixTypeSchema } from "../../src/schemas/common";
import { KillChainPhase, Malware, malwareSchema } from "../../src/schemas/sdo/malware.schema";
import { v4 as uuidv4 } from 'uuid';

describe('malwareSchema', () => {

    // TODO rename malware to the appropriate object type
    let malwares: any[];
    let minimalMalware: Malware;


    beforeAll(() => {
        // TODO reset malwares to the appropriate object type
        malwares = global.attackData.objectsByType['malware'];
        minimalMalware = malwareSchema.parse({
            type: stixTypeSchema.Enum["malware"] as StixType,
            id: `malware--${uuidv4()}` as StixIdentifier,
            spec_version: '2.1' as StixSpecVersion,
            created_by_ref: `identity--${uuidv4()}` as StixCreatedByRef,
            created: "2017-05-31T21:32:29.203Z" as StixCreatedTimestamp,
            modified: "2021-02-09T13:58:23.806Z" as StixModifiedTimestamp,
            name: "HAMMERTOSS" as Name,
            description: "[HAMMERTOSS](https://attack.mitre.org/software/S0037) is a backdoor that was used by [APT29](https://attack.mitre.org/groups/G0016) in 2015. (Citation: FireEye APT29) (Citation: F-Secure The Dukes)" as Description,
            external_references: [
              {
                source_name: "mitre-attack",
                url: "https://attack.mitre.org/software/S0037",
                external_id: "S0037"
              }
            ] as ExternalReferences,
            object_marking_refs: [
              "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ] as ObjectMarkingRefs,
            x_mitre_attack_spec_version: "2.1.0" as XMitreAttackSpecVersion,
            x_mitre_domains: ["enterprise-attack"] as XMitreDomains,
            x_mitre_modified_by_ref: "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5" as XMitreCreatedByRef,
            is_family: false as Boolean,
            x_mitre_version: "1.2" as XMitreVersion
          });
    });

    describe('Valid Inputs', () => {
        it('should accept minimal valid object (only required fields)', () => {
            expect(() => malwareSchema.parse(minimalMalware)).not.toThrow();
        });

        it('should accept fully populated valid object (required + optional fields)', () => {
            const fullMalware = {
                ...minimalMalware,
                revoked: true as Boolean,
                kill_chain_phases: [{ kill_chain_name: 'mitre-attack', phase_name: 'privilege-escalation' }] as KillChainPhase[],
                x_mitre_platforms: ['Windows'] as XMitrePlatforms,
                x_mitre_contributors: ['Contributor'] as XMitreContributors,
                x_mitre_aliases: ["HAMMERTOSS","HammerDuke","NetDuke"]

            }
            // Test with all fields populated with valid, non-edge-case values
            // const fullMalware = malwares.find(m =>
            //     m.revoked &&
            //     m.x_mitre_contributors &&
            //     m.x_mitre_platforms &&
            //     m.x_mitre_aliases
            // );
            expect(fullMalware).toBeDefined();
            expect(() => malwareSchema.parse(fullMalware)).not.toThrow();
        });

        it('should accept fully populated valid object (required + optional fields)', () => {
            // Test with all fields populated with valid, non-edge-case values
            const fullMalware = {
                ...minimalMalware,
                x_mitre_deprecated: true as Boolean,
                x_mitre_platforms: ['Windows'] as XMitrePlatforms,
                x_mitre_contributors: ['Contributor'] as XMitreContributors,
            }
            // const fullMalware = malwares.find(m =>
            //     m.x_mitre_deprecated &&
            //     m.x_mitre_platforms &&
            //     m.x_mitre_aliases
            // );
            expect(fullMalware).toBeDefined();
            expect(() => malwareSchema.parse(fullMalware)).not.toThrow();
        });
        // Add more valid input tests...
    });

    describe('Field-Specific Tests', () => {
        describe('id', () => {
            it('should accept valid values', () => {
                const validStixId = `malware--${uuidv4()}`;
                const validMalware = {
                    ...minimalMalware,
                    id: validStixId
                };
                expect(() => malwareSchema.parse(validMalware)).not.toThrow();
            });

            it('should reject invalid values', () => {
                const invalidMalware = { ...minimalMalware, id: 'invalid-id' };
                expect(() => malwareSchema.parse(invalidMalware)).toThrow();
            });

            it('should reject omittance of required values', () => {
                const { id, ...malwareWithoutId } = minimalMalware;
                expect(() => malwareSchema.parse(malwareWithoutId)).toThrow();
            });
        });

        describe('is_family', () => {
            it('should accept valid values', () => {
                const validIsFamily = true;
                const validMalware = {
                    ...minimalMalware,
                    is_family: validIsFamily
                };
                expect(() => malwareSchema.parse(validMalware)).not.toThrow();
            });

            it('should reject invalid values', () => {
                const invalidMalware = { ...minimalMalware, is_family: 'invalid-is-family' };
                expect(() => malwareSchema.parse(invalidMalware)).toThrow();
            });

            it('should reject omittance of required values', () => {
                const { is_family, ...malwareWithoutIsFamily } = minimalMalware;
                expect(() => malwareSchema.parse(malwareWithoutIsFamily)).toThrow();
            });
        });

        describe('created_by_ref', () => {
            it('should accept valid values', () => {
                const validCreatedByRef = `identity--${uuidv4()}`;
                const validMalware = {
                    ...minimalMalware,
                    created_by_ref: validCreatedByRef
                };
                expect(() => malwareSchema.parse(validMalware)).not.toThrow();
            });

            it('should reject invalid values', () => {
                const invalidMalware = { ...minimalMalware, created_by_ref: `malware--${uuidv4()}` };
                expect(() => malwareSchema.parse(invalidMalware)).toThrow();
            });

            it('should reject omittance of required values', () => {
                const { created_by_ref, ...malwareWithoutIsFamily } = minimalMalware;
                expect(() => malwareSchema.parse(malwareWithoutIsFamily)).toThrow();
            });
        });

        describe('malware_types', () => {
            it('should accept valid values', () => {
                const malwareTypes = ["keylogger","ransomware"];
                const validMalware = {
                    ...minimalMalware,
                    malware_types: malwareTypes
                };
                expect(() => malwareSchema.parse(validMalware)).not.toThrow();
            });

            it('should reject invalid values', () => {
                const invalidMalware = { ...minimalMalware, malware_types: ["invalid"] };
                expect(() => malwareSchema.parse(invalidMalware)).toThrow();
            });

            it('should accept omittance of optional values', () => {
                const {  malware_types, ...malwareWithoutIsFamily } = minimalMalware;
                expect(() => malwareSchema.parse(malwareWithoutIsFamily)).not.toThrow();
            });
        });

        describe('os_execution_envs', () => {
            it('should accept valid values', () => {
                const osExecutionEnvs = ["Linux"];
                const validMalware = {
                    ...minimalMalware,
                    os_execution_envs: osExecutionEnvs
                };
                expect(() => malwareSchema.parse(validMalware)).not.toThrow();
            });

            it('should reject invalid values', () => {
                const invalidMalware = { ...minimalMalware, os_execution_envs: "invalid" };
                expect(() => malwareSchema.parse(invalidMalware)).toThrow();
            });

            it('should accept omittance of optional values', () => {
                const {  os_execution_envs, ...malwareWithoutIsFamily } = minimalMalware;
                expect(() => malwareSchema.parse(malwareWithoutIsFamily)).not.toThrow();
            });
        });

        // Repeat for each field...
    });

    describe('Schema-Level Tests', () => {
        it('should reject unknown properties', () => {
        });

        // Add any other schema-level tests...
    });

    describe('Edge Cases and Special Scenarios', () => {
        it('should handle special case X', () => {
            // Test any schema-specific special cases
        });

        // Add more edge case tests as needed...
    });
});